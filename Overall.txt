https://www.youtube.com/watch?v=knyJt8d6C_8  --> vim short cuts

KUBE_EDITOR=vim kubectl edit deploy  <deployment_name>

https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands  --> 
To check for imperative commands 

https://kubernetes.io/docs/tasks/   https://kubernetes.io/docs/concepts/   check following  for revision and browsing so you know where to look for

Kubect create -f .  ## Runs all the yamls in current directory 



Kubectl EXEC

Use kubectl exec to execute commands directly 
kubectl exec -it pod-name -- /bin/sh -c "command(s)" 

kubectl exec -it suitecrm-0 -- /bin/bash -c "ls /"

-------------------------------------------------------------

K8s COMMANDS in YAML

In some cases, you need your command to run in a shell. 
For example, your command might consist of several commands piped together,
or it might be a shell script. To run your command in a shell, wrap it like this:

command: ["/bin/sh"]
args: ["-c", "while true; do echo hello; sleep 10;done"]

--------------------------------------------------------------------


kubectl expose deployment smiple-webapp-deployment --name=webapp-service --target-port=8081
--type=NodePort --port=8080 --dry-run=client -o yaml > svc.yaml 
## Exposing a deployment via creatinig a service  webapp-service 
## service port is 8080 , and target port on container is 8081
then open svc.yaml to add "nodePort"

kubectl create deployment <name> --image=<image-name> --dry-run=client -o yaml 
kubectl scale --replicas=<#> deployment <deployment-name>  --dry-run=client -o yaml ##Generate Deployment with 4 Replicas
kubectl create deployment nginx --image=nginx --replicas=4  --dry-run=client -o yaml  ## 


kubectl config set-context <cluster name>  --namespace=<name>
kubectl config set-current --current  --namespace=<name>

Labels

kubectl run nginx --image=nginx  -l <label_name>=<label_value> --dry-run=client -o yaml    ## 
kubectl run nginx --image=nginx  --labels=<label_name>=<label_value>,<label_name2>=<label_value2> --dry-run=client -o yaml  ## Adding Labels
kubectl label pods foo unhealthy=true     // VVIMP adding label 
kubectl label --overwrite pods foo status=unhealthy   // VVIMP updating label
# Update pod 'foo' by removing a label named 'bar' if it exists
# Does not require the --overwrite flag
kubectl label pods foo bar-   //  VVIMP deleting label

HOW to use explain Commands!!!

kubectl explain pods --recursive | less   ## to browse the detailed yaml syntax of pods 
kubectl explain pods.spec.containers --recursive   // To just get yaml syntax of on section of attribute
kubectl explain pods --recursive | grep -A<n>/-B<n>/-C<n>  <regexPattern> ##  To print <n> lines after <regexPattern>


kubect get pods,svc,...  --all-namespaces
kubect get pods,svc,...  -o wide  // Gives more Tabular information  data 
kubect get pods,svc,...  -o name  // Just prints name
kubect get pods,svc,...  --all-namespaces

kubectl get all --all-namespaces  ## To get all the resources 


How to Use selectors

kubectl get pods --selector <key1>=<value1>,<key2>=<value2>
kubectl get all --selector env=prod --no-headers  | wc -l
kubectl get pods --selector env=prod,bu=finance,tier=frontend 
kubectl get all --selector env=prod


Kube Security Context

kubectl exec ubuntu-sleeper<pod_name> -i -t  -- whoami  // to check what is user is running containers
Capablites are only supported at contianer level while securityContext at both spec and container level
cat ./k8sconfigurations/Kube_SecurityConcepts/Notes

----------------------------------------------------------------------

Read Kubectl exec -h
  # Get output from running 'date' command from the first pod of the deployment mydeployment, using the first container
by default
  kubectl exec deploy/mydeployment -- date

 # Get output from running 'date' command from the first pod of the service myservice, using the first container by
default
  kubectl exec svc/myservice -- date

    # Get output from running the 'date' command in ruby-container from pod mypod
  kubectl exec mypod -c ruby-container -- date


---------------------------------------------------------------------------  

## Learn Imperative commands to create Service 
kubectl create svc nodeport webapp-service --tcp=8080:8080  --dry-run=client -o yaml > websvc.yml 
## Then update the yml with name , selector name 


kubectl scale --replicas=<#> deployment <deployment-name>  --dry-run=client -o yaml OR
Generate Deployment with 4 Replicas
kubectl create deployment nginx --image=nginx --replicas=4  --dry-run=client -o yaml


kubectl get deploy --namespace app-space  ## To get all applications deployed in app-space

kubectl get deploy --all-namespaces  ## Get Apps across all namespaces

kubectl get ingress --all-namespaces  ## To get ingress resources across all namespaces 

kubectl edit ingress --namespace app-space  ## To edit an ingress resource 

kubectl get deployments,svc  -n <namespace>  ## get all the details for deployments and services in namespace

kubectl create cm nginx-configuration -n ingress-space ## Imperatively creating configMap 

kubectl create sa nginx-serviceacount -n ingress-space ## Imperatively creating serviceacount 
kubectl get pods -l <key>=<value>,....  Ex :- kubectl get pods -l name=internal  // -l is shorthand for --selector

---------------------------------------------------------------------------------------------
Revise jsonpath from here https://kodekloud.com/topic/json-path-use-case-kubernetes/
JSONPATH Examples:

kubectl get po nginx -o jsonpath='{.spec.containers[].image}{"\n"}' // the {"\n"} is for new line

kubectl get secrets default-token-nvg4d   -o jsonpath='{.data.token}' | base64 -d

kubectl get po -o=custom-columns="POD_NAME:.metadata.name, POD_STATUS:.status.containerStatuses[].state"

--------------------------------------------------------------------------------------------

Get PV -> PVC -> Pod use take PVC as input in Volume and add it to a path of volumeMounts

Shortcuts 

po for pods
rs for Replicasets
deploy for deployments
svc for Services
ns for Namespaces
netpol for Network Policies 
pv for PersistentVolume
pvc for PersistentVolumeClaim
sa for Service Account

kubectl config set-context <cluster_name> --namspace=myns 

kubect explain cronjob.spec.template --recursive

kubectl run nginx --image=nginx  --> gives deployment
kubectl run nginx --image=nginx  --restart=Never  --> gives pods
kubectl run nginx --image=nginx  --restart=OnFailure   --> gives Jobs
kubectl run nginx --image=nginx  --restart=OnFailure --schedule="*****"  --> gives cronjob

Complex Example
kubectl run nginx --image=nginx --restart=Never --port=80 --namespace=myname 
--env=HOSTNAME=local --labels=bu=finance,env=dev  
--requests='cpu=100m,memory=256Mi' --limits='cpu=200m,memory=512Mi'
--dry-run=client -o yaml --commands -- /bin/sh -c 'echo hello world' > generate.yml


// INGRESS imperative command examples 

kubectl create ingress -h // Some Cool imperative commands
# Create a single ingress called 'simple' that directs requests to foo.com/bar to svc
# svc1:8080 with a tls secret "my-cert"

kubectl create ingress simple --rule="foo.com/bar=svc1:8080,tls=my-cert"

# Create an ingress with the same host and multiple paths
 kubectl create ingress multipath --class=default \
 --rule="foo.com/=svc:port" \
--rule="foo.com/admin/=svcadmin:portadmin"
  
# Create an ingress with multiple hosts and the pathType as Prefix
 kubectl create ingress ingress1 --class=default \
--rule="foo.com/path*=svc:8080" \
--rule="bar.com/admin*=svc2:http"
--annotation="nginx.ingress.kubernetes.io/rewrite-target=/" 
--annotation="nginx.ingress.kubernetes.io/ssl-redirect=false"

// ALWAYS ADD THESE ANNOTATIONS IN INGRESS YAML
annotations:
   nginx.ingress.kubernetes.io/rewrite-target: /
   nginx.ingress.kubernetes.io/ssl-redirect: "false"




--> Crearting a deployment
kubectl run frontend --replicas=2 --labels=run=load-balancer-example --image=busybox  --port=8080
--> Exposing the deployment as NodePort Service called "frontend-service"
kubectl expose deployment frontend --type=NodePort --name=frontend-service --port=6262 --target-port=8080
---> setting serviceaccount details for deployment
kubectl set serviceaccount deployment frontend myuser
kubectl create service clusterip my-cs --tcp=5678:8080 --dry-run -o yaml
--> 

---------------------------------------------------------------------------------------------------------------------------
AUTHORIZATION RELATED (Roles and Bindings)

Modes are set using authorization mode option in Kube ApiServer
--authorization-mode=Node,RBAC,Webhook // SEQUENCE ALSO REFLECTS ORDER OF APPLICATION of MODES

These settings are available in kube-apiserver pods

kubectl describe pod kube-apiserver-controlplane -n kube-system  // Check authorization-mode parameter
kubectl describe role <role-name>  -n <namespace>
kubectl get rolebindings --all-namespaces --no-headers
kubectl create role developer --namespace=default --verb=list,create,delete --resource=pods  --dry-run=client -o yaml > role.yaml

kubectl create rolebinding NAME --clusterrole=NAME|--role=NAME [--user=username] [--group=groupname]
[--serviceaccount=namespace:serviceaccountname] [--dry-run=server|client|none] [options]



kubectl create role NAME --verb=verb --resource=resource.group/subresource [--resource-name=resourcename]
[--dry-run=server|client|none] [options]

# Create a role named "foo" with SubResource specified
kubectl create role foo --verb=get,list,watch --resource=pods,pods/status

# Create a role named "pod-reader" with ResourceName specified
kubectl create role pod-reader --verb=get --resource=pods --resource-name=readablepod --resource-name=anotherpod
  

----- ClusterRole Sample File -----------

apiVersion: rbac.authorization.k8s.io./v1
kind: ClusterRole
metadata:
  name: cluster-administrator
rule:
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["list", "get" , "create" , "delete"]

kubectl create -f clusterrole.yaml

----- Cluster Role Binding --------

apiVersion: rbac.authorization.k8s.io./v1
kind: ClusterRoleBinding
metadata:
  name: cluster-admin-role-binding
subjects:  // Subject can be USER , GROUP OR SERVICEACCOUNT
- kind: User
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: cluster-administrator
  apiGroup: rbac.authorization.k8s.io


CHECK ACCESS (with auth can-i)  VVIMP!!!

kubectl auth can-i create deployments
yes

kubectl auth can-i delete nodes
no


--as <user_name>  // for impersonating another user as an administrator

kubectl auth can-i create deployments  --as dev-user
kubectl auth can-i create pods  --as dev-user  --namspace test 

---------------------------------------------------------------------------------------------------------------------------------------------
How to Making Curl request to  Service from k8s cluster
2. Run a tmp container with curl command to service url

CURL REQUEST --> curl http://<service name>.<namespace>:<serviceport>

k run tmp --restart=Never --rm --image=nginx:alpine -i -- curl http://project-plt-6cc-svc.pluto:3333

--rm -> is to delete the pod as soon it runs

------

How to  Create tls Secret in a namespace

kubectl -n <namespace> create secret tls <tls secret name> --cert "/root/keys/webhook-server-tls.crt" --key "/root/keys/webhook-server-tls.key"

-------

kubectl api-resources  //  it will help to get short names for api-resources

1.22.2 -> Major version 1 , Minor 22 , patch 2

---------
Read ApiVersion deprecation policy 

kubectl-convert   // how to convert older yaml using previous apiVersion to the ones using new Apiversion
                  // requires special plugins installation 

kubectl-convert -f <old_file>.yaml --output-version <new-api-version>  
kubectl-convert -f <old_file>.yaml --output-version apps/v1


HOW TO FIND DETAILS ON KUBE RESOURCES
-> ApiGrpup & ApiVersion
-> Kind 
-> shortname

kubectl api-resources  // VVIMP COMMAND
NAME                              SHORTNAMES   APIVERSION                             NAMESPACED   KIND
bindings                                       v1                                     true         Binding
componentstatuses                 cs           v1                                     false        ComponentStatus
configmaps                        cm           v1                                     true         ConfigMap
clusterroles                                   rbac.authorization.k8s.io/v1           true         ClusterRole
