Read Volumes_Notes.txt 1st

PVC are done to make the storage got from PV  available to a  node

administrator creates a set of PVs and customers create PVCs 

There is one to one mapping between claim and volume --> Even if the PV has sufficient extra space left , remaining space cannot be claimed by another PVC
^^ VVIMP  --> Reason since PVC are namespaced scope objects

Every PVC is bound to a single PV , k8s tries to find a PV that has sufficient capacity 
as requested by the claim --> VVIMP

If there are multiple possible Claims to PVs , then you can use labels and selectors to 
bind to the exact PV  --> VVIMP

When PVC is deleted what happens to underlying PV can be configured
by default it is Retain , or it can be set to Delete or Recycled

Recycled -> scrub of prev data and make PV available again

persistantVolumeclaimPolicy: Retain

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: myclaim
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 500Mi


---------------------------------------------------
Example for referencing --> volumeMounts , volumes and persistanct volume claims
Same pattern is used in case for Deployments and Replicasets

apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  containers:
    - name: myfrontend
      image: nginx
      volumeMounts:
      - mountPath: "/var/www/html"
        name: mypd
  volumes:
    - name: mypd
      persistentVolumeClaim:
        claimName: myclaim


kubectl get persistantvolumeclaim
