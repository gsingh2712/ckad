

Format of KubeConfig File
--> Clusters
   1. diferent Clusters like ProdCluster , Development Cluster
--> Contexts
   --> Marry Users to Cluster.
   --> Which account is for which user.
--> Users 
    1. User Accounts with which you access these clusters
        --> it could be admin user , dev user or prod user


current-context :- Points to the context 

How to change context to use a user with a cluster 
--> HINT there will be a context in config that will map an user to given cluster 
Ans:- 
kubectl config use-context <user>@<cluster>  // This will change the current context to use context with mapping of user and cluster



KubeConfig File location $HOME/.kube/config

https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/

Commands 

kubectl config view  // Lists KubeConfig
kubectl config view --kubeconfig=<path_to_custom_config>> // Update the kube config
kubectl config use-contest <contextName>  // To set curent context to <contextName> and access that cluster
kubectl config -h // check this
kubectl config set-context --current --namespace < >

Add cluster details to your configuration file ( config-demo )
kubectl config --kubeconfig=config-demo set-cluster development --server=https://1.2.3.4 --certificate-authority=fake-ca-file
kubectl config --kubeconfig=config-demo set-cluster scratch --server=https://5.6.7.8 --insecure-skip-tls-verify

Add user details to your configuration file ( config-demo ):
kubectl config --kubeconfig=config-demo set-credentials developer --client-certificate=fake-cert-file --client-key=fake-key-seefile
kubectl config --kubeconfig=config-demo set-credentials experimenter --username=exp --password=some-password


Add context details to your configuration file ( config-demo ) : 
kubectl config --kubeconfig=config-demo set-context dev-frontend --cluster=development --namespace=frontend --user=developer
kubectl config --kubeconfig=config-demo set-context dev-storage --cluster=development --namespace=storage --user=developer
kubectl config --kubeconfig=config-demo set-context exp-scratch --cluster=scratch --namespace=default --user=experimenter

Note:
To delete a user you can run     kubectl --kubeconfig=config-demo config unset users.<name>
To remove a cluster, you can run kubectl --kubeconfig=config-demo config unset clusters.<name>
To remove a context, you can run kubectl --kubeconfig=config-demo config unset contexts.<name>

-------------------------------------------------------------------------------

KUBECONFIG FILE GENERATED

apiVersion: v1
clusters:
- cluster:
    certificate-authority: fake-ca-file
    server: https://1.2.3.4
  name: development
- cluster:
    insecure-skip-tls-verify: true
    server: https://5.6.7.8
  name: scratch
contexts:
- context:
    cluster: development
    namespace: frontend
    user: developer
  name: dev-frontend
- context:
    cluster: development
    namespace: storage
    user: developer
  name: dev-storage
- context:
    cluster: scratch
    namespace: default
    user: experimenter
  name: exp-scratch
current-context: ""
kind: Config
preferences: {}
users:
- name: developer
  user:
    client-certificate: fake-cert-file
    client-key: fake-key-file
- name: experimenter
  user:
    password: some-password
    username: exp


------------------------------------------------------------------------------

You can configure context to use specific namespace as well, check example below

....
contexts:
- name: admin@prod
  context:
    cluster: production
    user: admin
    namespace: <..>
....
....

Certificates in KubeConfig

....
users:
- name: admin
  user:
    client-certificate: <full_path_to_certificate>
    client-key: <full_path_to_key>
....

-------------------------------------------------------------------------------

you can mention certificate authority using 'certificate-authority' with path to certificate 
OR as 'client-certificate-data' which is base64 encoded  certificate value ( cat ca.crt | base64 )

how to decode certificate ==> echo "base64 encoded certificate" | base64 --decode
