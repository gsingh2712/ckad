Authorization is needed for differentiated access level between developers and admins and Bots (jenkings , ci/cd)

Different Authorization Mechanisms
-> Node
-> ABAC (Attribute)
-> RBAC (Role)
-> Webhook

NODE 
It is used for authentication management between internal components of cluster. LIKE between Kublet and Apiserver
Any request from resources part of 'system:nodes'  group (like kubelet )  will have a name prefix like system:node:<name>
is Authorised by the NODE AUTHORIZER and are granted Node privileges.


Attribute Based Access Control
External Access to the API 
ABAC is where you associate an user or group of user (like developers) with a set of permissions (like view / create/ delete pods )
This is done via a policy File ( k8s resource/kind Policy) which is passed to Api Server
It becomes quite cumbersive as it has to be done for every user / user group that is  added / edited  and Api server had to be restarted

{"kind": "Policy"", "spec": {"user":"dev-user", "namespace": "*" , "resources":"pods", "apiGroups":"*" } }

{"kind": "Policy"", "spec": {"group":"dev-users", "namespace": "*" , "resources":"pods", "apiGroups":"*" } }

RBAC Role Based Access Control
Creating Roles with set of permissions , associate developers to the role
Adding / Updates Roles is much easier

WEBHOOK
When you want to outsource this authorization Like OPA

Auth Modes:-

AlwaysAllow  --> (Default) Allows all requests without Auth checks 
AlwaysDeny   --> Denies all requests

Modes are set using authorization mode option in Kube ApiServer 
--authorization-mode=Node,RBAC,Webhook // SEQUENCE ALSO REFLECTS ORDER OF APPLICATION of MODES

These settings are available in kube-apiserver pods

kubectl describe pod kube-apiserver-controlplane -n kube-system  // Check authorization-mode

kubectl describe role <role-name>  -n <namespace>

kubectl get rolebindings --all-namespaces --no-headers

kubectl create role developer --namespace=default --verb=list,create,delete --resource=pods  --dry-run=client -o yaml > role.yaml
