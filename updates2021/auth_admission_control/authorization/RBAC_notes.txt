
---- Role Creation ------
apiVersion: rbac.authorization.k8s.io./v1
kind: Role
metadata:
  name: developer
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["list" , "get" , "create", "update"]

apiGroups can be left blank like  for CORE groups

kubectl create -f role.yaml



---- Role Binding 

apiVersion: rbac.authorization.k8s.io./v1
kind: RoleBinding
metadata:
  name: devuser-developer-binding
subjects:
- kind: User
  name: dev-user
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: developer
  apiGroup: rbac.authorization.k8s.io
  

Subjects --> here we specify user details

kubectl create -f rolebind.yaml

Rolebinding is namespace scoped , with 'default' as default namespace. 

kubectl describe role <rolename>
kubectl describe rolebinding <rolebindname>


CHECK ACCESS (with auth can-i)  VVIMP!!!

kubectl auth can-i create deployments
yes

kubectl auth can-i delete nodes
no


--as <user_name>  // for impersonating another user as an administrator

kubectl auth can-i create deployments  --as dev-user
kubectl auth can-i create pods  --as dev-user  --namspace test 

VVIMP
RESCTRICT Acces of Roles to certain Name of resources based on resourceNames

apiVersion: rbac.authorization.k8s.io./v1
kind: Role
metadata:
  name: developer
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get" , "create", "update"]
  resourceNames: ["blue", "orange"] 

^^ access allowed only  to pad with names blue and orange 

